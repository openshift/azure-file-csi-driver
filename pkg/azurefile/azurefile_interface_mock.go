// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/azurefile/azurefile_interface.go
//
// Generated by this command:
//
//	mockgen -package azurefile -source ./pkg/azurefile/azurefile_interface.go --copyright_file ./hack/boilerplate/boilerplate.generatego.txt
//

// Package azurefile is a generated GoMock package.
package azurefile

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAzureFileClient is a mock of AzureFileClient interface.
type MockAzureFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureFileClientMockRecorder
}

// MockAzureFileClientMockRecorder is the mock recorder for MockAzureFileClient.
type MockAzureFileClientMockRecorder struct {
	mock *MockAzureFileClient
}

// NewMockAzureFileClient creates a new mock instance.
func NewMockAzureFileClient(ctrl *gomock.Controller) *MockAzureFileClient {
	mock := &MockAzureFileClient{ctrl: ctrl}
	mock.recorder = &MockAzureFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureFileClient) EXPECT() *MockAzureFileClientMockRecorder {
	return m.recorder
}

// CreateFileShare mocks base method.
func (m *MockAzureFileClient) CreateFileShare(ctx context.Context, shareOptions *ShareOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileShare", ctx, shareOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFileShare indicates an expected call of CreateFileShare.
func (mr *MockAzureFileClientMockRecorder) CreateFileShare(ctx, shareOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileShare", reflect.TypeOf((*MockAzureFileClient)(nil).CreateFileShare), ctx, shareOptions)
}

// DeleteFileShare mocks base method.
func (m *MockAzureFileClient) DeleteFileShare(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileShare", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileShare indicates an expected call of DeleteFileShare.
func (mr *MockAzureFileClientMockRecorder) DeleteFileShare(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileShare", reflect.TypeOf((*MockAzureFileClient)(nil).DeleteFileShare), ctx, name)
}

// GetFileShareQuota mocks base method.
func (m *MockAzureFileClient) GetFileShareQuota(ctx context.Context, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileShareQuota", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileShareQuota indicates an expected call of GetFileShareQuota.
func (mr *MockAzureFileClientMockRecorder) GetFileShareQuota(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileShareQuota", reflect.TypeOf((*MockAzureFileClient)(nil).GetFileShareQuota), ctx, name)
}

// ResizeFileShare mocks base method.
func (m *MockAzureFileClient) ResizeFileShare(ctx context.Context, name string, sizeGiB int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeFileShare", ctx, name, sizeGiB)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeFileShare indicates an expected call of ResizeFileShare.
func (mr *MockAzureFileClientMockRecorder) ResizeFileShare(ctx, name, sizeGiB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeFileShare", reflect.TypeOf((*MockAzureFileClient)(nil).ResizeFileShare), ctx, name, sizeGiB)
}
